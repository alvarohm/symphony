To String Extensions
// import packages used by external $$ java code
import eu.compassresearch.ast.util.Utils;
import eu.compassresearch.ast.util.ToStringUtil;


%source->file = [name]  
%source->inputStream = [origin]
// %source->tcpStream = "" [ip] ":" [port] ""

// Actions
%action->#Replicated = "Replication of action: " [replicatedAction]

%action->#Parallel->synchronousParallelism = [leftAction]+ " [| " + [leftNamesetExpression]+" | " + [rightNamesetExpression]+ " |] " +  [rightAction]
%action->#Parallel->interleaving = [leftAction]+ " [|| " + [leftNamesetExpression]+" | " + [rightNamesetExpression]+ " ||] " +  [rightAction]
%action->#Parallel->generalisedParallelism = [leftAction]+ " [| " + [leftNamesetExpression]+" | " +[chansetExpression]+ " | "+ [rightNamesetExpression]+ " |] " +  [rightAction]
%action->#Parallel->alphabetisedParallelism = [leftAction]+ " [ " + [leftNamesetExpression]+" | " +[leftChansetExpression]+ " || "+[rightChansetExpression]+" | "+ [rightNamesetExpression]+ " ] " +  [rightAction]

%action->#Replicated->generalisedParallelism = [chansetExpression]+"" +[replicationDeclaration]+ " @ "+[namesetExpression]+"" +[replicatedAction] 

// %action->specification = "[" +
//             $($[externals]$.isEmpty() ? "" : "\n\text " + $[externals]$) +
//             ($[precondition]$ == null ? "" : "\n\tpre " + $[precondition]$) +
//             ($[postcondition]$ == null ? "" : "\n\tpost " + $[postcondition]$) +
//             ($[errors]$.isEmpty() ? "" : "\n\terrs " + $[errors]$)$ + "]" 
%action->communication = [identifier] +$Utils.listToString($[communicationParameters]$,"")$ +" -> " [action]
%communicationParameter->write ="!" [expression]
%communicationParameter->signal ="." [expression]
%communicationParameter->read  = "?" [pattern]+ $($[expression]$!=null?"("+$[expression]$+")":"")$ 
%action->skip = "Skip"
%action->stop = "Stop"
%action->chaos = "Chaos"
%action->div = "Div Action"
%action->wait = "Wait"
%action->sequentialComposition = [left] " ; " [right]
%action->reference = [name]
%action->#Parallel->interleaving = [leftAction] "|||" [rightAction]
%action->#Parallel->generalisedParallelism = [leftAction] "[|" [chansetExpression] "|]" [rightAction]

%action->#Parallel->#Parallelism->alphabetised= [leftAction] " [" [leftNamesetExpression] " | " [leftChansetExpression] " || " [rightChansetExpression] " | " [rightNamesetExpression] "] "[rightAction]
             
                


//%action->#Statement->block = "Block {" [action] "}"
//%action->#Statement->new = [destination]" := new " [className] "("+ $Utils.listToString($[args]$)$ + ")"
//%action->#Statement->return = "return "[exp]
//%action->#Statement->#GeneralAssignment->single = [stateDesignator] " := " [expression]

%action->parametrised = "params: " [parametrisations] " action: " [action]
%parametrisation->val = "val " [declaration]
%parametrisation->res = "res " [declaration]
%parametrisation->vres = "vres " [declaration]
%action->communication = [identifier] " -> " [action]
%action->guarded = [expression] " & " [action]
//%action->#Statement->call = [name] "(" + $org.overture.ast.util.Utils.listToString($  [args]  $)$ + ")"
%declaration->#Single->type = [identifier] " : " [type]
%declaration->#Single->expression = [identifier] " := " [expression]

//%exp->variable = [name]

// Processes
%process->action = "begin\n" [actionDefinition] " @ " [action] "\nend"

%definition->#class->action = "class " [name]$.getFullName()+ ($[supernames]$.isEmpty() ? "" : " is subclass of " +$ [supernames]$) + "\n" + ToStringUtil.getDefinitionListString($[definitions]$)$+           "end "  [name]$.getFullName()$ + "\n"


//%type->error = "Type Error"

// varSetExpressions
%VarsetExpression->fatEnum = "{| " +$Utils.listToString($[channelNames]$)$+ " |}"
%VarsetExpression->enum = "{ " +$Utils.listToString($[channelNames]$)$+ " }"
%VarsetExpression->identifier = [identifier]
%VarsetExpression->comp = "{ " [channelNameExp] " | " +$Utils.listToString($[bindings]$,",")+($[predicate]$ == null ? " }" : " & " + $[predicate]$ + " }")$
%VarsetExpression->fatComp = "{| " [channelNameExp] " | " +$Utils.listToString($[bindings]$,",")+($[predicate]$ == null ? " |}" : " & " + $[predicate]$ + " |}")$

//  Expressions
%exp->#Channel->name = [identifier]+ $($[expressions]$!=null && !$[expressions]$.isEmpty()?Utils.listToString("!",_expressions):"")$+""
%exp->unresolvedPath = "("+  $org.overture.ast.util.Utils.listToString($[identifiers] $ , ".")$ +")"

//  Patterns

//  Definitions
%definition->process = "Process " [name]$.getName()+$ " " [localState] "\n" [process] 
%definition->action = "actions " [name]$.getName()+$ " " [declarations] + "\n\t"+ [action]
%definition->channel = "channel " [name]$.getName()+$ " : " [type]
%definition->nameset = "nameset " [identifier] + " = " + [namesetExpression]


//%definition->class = "Class " [name]$.getName()$
%definition->state = "State Paragraph"
//%definition->#cmlOperation->implicit = [name] + " " + [type]
//%definition->#cmlOperation->explicit = [name] + " " + [type]
//  Statements



//Access
                                    
%access->logical ="logical"

//designator

//types
%type->channel= ""+ $Utils.listToString($[parameters]$," * ")$
